// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -D Default -D PartialEq -A -d -f config/crd/bases/runtime.cluster.x-k8s.io_extensionconfigs.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// GeneratePatchesRequest is the request of the GeneratePatches hook.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
#[kube(group = "runtime.cluster.x-k8s.io", version = "v1alpha1", kind = "ExtensionConfig", plural = "extensionconfigs")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ExtensionConfigSpec {
    /// APIVersion defines the versioned schema of this representation of an object.
    /// Servers should convert recognized schemas to the latest internal value, and
    /// may reject unrecognized values.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// items is the list of templates to generate patches for.
    pub items: Vec<ExtensionConfigItems>,
    /// Kind is a string value representing the REST resource this object represents.
    /// Servers may infer this from the endpoint the client submits requests to.
    /// Cannot be updated.
    /// In CamelCase.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// settings defines key value pairs to be passed to the call.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<BTreeMap<String, String>>,
    /// variables are global variables for all templates.
    pub variables: Vec<ExtensionConfigVariables>,
}

/// GeneratePatchesRequestItem represents a template to generate patches for.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct ExtensionConfigItems {
    /// holderReference is a reference to the object where the template is used.
    #[serde(rename = "holderReference")]
    pub holder_reference: ExtensionConfigItemsHolderReference,
    /// object contains the template as a raw object.
    pub object: BTreeMap<String, serde_json::Value>,
    /// uid is an identifier for this template. It allows us to correlate the template in the request
    /// with the corresponding generated patches in the response.
    pub uid: String,
    /// variables are variables specific for the current template.
    /// For example some builtin variables like MachineDeployment replicas and version are context-sensitive
    /// and thus are only added to templates for MachineDeployments and with values which correspond to the
    /// current MachineDeployment.
    pub variables: Vec<ExtensionConfigItemsVariables>,
}

/// holderReference is a reference to the object where the template is used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct ExtensionConfigItemsHolderReference {
    /// apiVersion of the referent.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// fieldPath is the path to the field of the object which references the template.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
    /// kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    pub kind: String,
    /// name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    pub name: String,
    /// namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    pub namespace: String,
}

/// Variable represents a variable value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct ExtensionConfigItemsVariables {
    /// name of the variable.
    pub name: String,
    /// value of the variable.
    pub value: serde_json::Value,
}

/// Variable represents a variable value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct ExtensionConfigVariables {
    /// name of the variable.
    pub name: String,
    /// value of the variable.
    pub value: serde_json::Value,
}

